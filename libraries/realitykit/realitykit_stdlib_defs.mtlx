<?xml version="1.0"?>
<!--
Copyright Â© 2024 Apple Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit
persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-->
<materialx version="1.38">

    <!--
      Node: <subtract>
      Subtract "in2" value/stream from the incoming float/color/vector/matrix.
    -->
    <!-- NOTE : This node doesn't have a nodegraph implementation - its a source code implementation -->
    <nodedef name="ND_subtract_integer" node="subtract" nodegroup="math">
        <input name="in1" type="integer" value="0" />
        <input name="in2" type="integer" value="0" />
        <output name="out" type="integer" defaultinput="in1" />
    </nodedef>

    <!--
      Node: <safepower> Supplemental Node
      Raise incoming float/color/vector values to the "in2" power.
    -->
    <nodedef name="ND_safepower_float" node="safepower" nodegroup="math">
        <input name="in1" type="float" value="0.0" />
        <input name="in2" type="float" value="1.0" />
        <output name="out" type="float" defaultinput="in1" />
    </nodedef>
    <nodedef name="ND_safepower_color3" node="safepower" nodegroup="math">
        <input name="in1" type="color3" value="0.0, 0.0, 0.0" />
        <input name="in2" type="color3" value="1.0, 1.0, 1.0" />
        <output name="out" type="color3" defaultinput="in1" />
    </nodedef>
    <nodedef name="ND_safepower_color4" node="safepower" nodegroup="math">
        <input name="in1" type="color4" value="0.0, 0.0, 0.0, 0.0" />
        <input name="in2" type="color4" value="1.0, 1.0, 1.0, 1.0" />
        <output name="out" type="color4" defaultinput="in1" />
    </nodedef>
    <nodedef name="ND_safepower_vector2" node="safepower" nodegroup="math">
        <input name="in1" type="vector2" value="0.0, 0.0" />
        <input name="in2" type="vector2" value="1.0, 1.0" />
        <output name="out" type="vector2" defaultinput="in1" />
    </nodedef>
    <nodedef name="ND_safepower_vector3" node="safepower" nodegroup="math">
        <input name="in1" type="vector3" value="0.0, 0.0, 0.0" />
        <input name="in2" type="vector3" value="1.0, 1.0, 1.0" />
        <output name="out" type="vector3" defaultinput="in1" />
    </nodedef>
    <nodedef name="ND_safepower_vector4" node="safepower" nodegroup="math">
        <input name="in1" type="vector4" value="0.0, 0.0, 0.0, 0.0" />
        <input name="in2" type="vector4" value="1.0, 1.0, 1.0, 1.0" />
        <output name="out" type="vector4" defaultinput="in1" />
    </nodedef>
    <nodedef name="ND_safepower_color3FA" node="safepower" nodegroup="math">
        <input name="in1" type="color3" value="0.0, 0.0, 0.0" />
        <input name="in2" type="float" value="1.0" />
        <output name="out" type="color3" defaultinput="in1" />
    </nodedef>
    <nodedef name="ND_safepower_color4FA" node="safepower" nodegroup="math">
        <input name="in1" type="color4" value="0.0, 0.0, 0.0, 0.0" />
        <input name="in2" type="float" value="1.0" />
        <output name="out" type="color4" defaultinput="in1" />
    </nodedef>
    <nodedef name="ND_safepower_vector2FA" node="safepower" nodegroup="math">
        <input name="in1" type="vector2" value="0.0, 0.0" />
        <input name="in2" type="float" value="1.0" />
        <output name="out" type="vector2" defaultinput="in1" />
    </nodedef>
    <nodedef name="ND_safepower_vector3FA" node="safepower" nodegroup="math">
        <input name="in1" type="vector3" value="0.0, 0.0, 0.0" />
        <input name="in2" type="float" value="1.0" />
        <output name="out" type="vector3" defaultinput="in1" />
    </nodedef>
    <nodedef name="ND_safepower_vector4FA" node="safepower" nodegroup="math">
        <input name="in1" type="vector4" value="0.0, 0.0, 0.0, 0.0" />
        <input name="in2" type="float" value="1.0" />
        <output name="out" type="vector4" defaultinput="in1" />
    </nodedef>

    <!--
      Node: normal map decoder
      applies a 2x-1 to an existing normal.
    -->
    <nodedef name="ND_normal_map_decode" node="normal_map_decode" nodegroup="math">
        <input name="in" type="vector3" value="0.5,0.5,1.0"/>
        <output name="out" type="vector3"/>
    </nodedef>

    <!--
      Node: <normalmap>
      Transform a normal vector from object or tangent space into "world" space.
      NOTE : We don't support independent scale factors, as suggested by the parameterization here
      instead here we're just using the length of the input scale.
      To support two dimensional scaling we'll need to provide custom shader code.
    -->
    <nodedef name="ND_normalmap_vector2" node="normalmap" nodegroup="math">
        <input name="in" type="vector3" value="0.5, 0.5, 1.0" />
        <input name="space" type="string" value="tangent" enum="tangent, object" uniform="true" />
        <input name="scale" type="vector2" value="1.0, 1.0" />
        <input name="normal" type="vector3" defaultgeomprop="Nworld" />
        <input name="tangent" type="vector3" defaultgeomprop="Tworld" />
        <output name="out" type="vector3" defaultinput="normal" />
    </nodedef>

</materialx>
